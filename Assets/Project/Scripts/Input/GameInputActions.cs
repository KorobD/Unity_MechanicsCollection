//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Project/Input/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""T01_Player"",
            ""id"": ""dbad2b6d-cbe0-4ba3-81ff-e6f68a3d5bd2"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""654f75ee-6d05-4f3f-939a-2a0111fe1d51"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0b262296-4cb5-48c5-8f5a-1d87c02b17cc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""89829f6a-7445-4f09-9592-0aa6e8795c87"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8cca6855-f018-41b8-bf96-c03cb75dac2c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c357e0bf-3057-4efc-a4d5-a1fea15c1deb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0c70ccca-cfc8-47cf-9b7d-d58089e5bae2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9904b439-43bf-428c-bb4e-32d3185969c0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""157b349c-b110-4584-b3cb-ef63f8b21025"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2d823026-0b50-4f45-9766-bb819d87de37"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7889f589-b43a-40bb-8642-e0aa3d52899e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""T02_Player"",
            ""id"": ""b0ef80da-47f9-45d4-adbd-1b149e262d89"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3f78d176-5091-43a8-ad76-01bc96f4ccff"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shot"",
                    ""type"": ""Button"",
                    ""id"": ""64b64092-a623-4d29-a11a-41a03ff495c0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowMenu"",
                    ""type"": ""Button"",
                    ""id"": ""d1616419-88fd-4fc7-84c3-eaa5592baa98"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""acc57bbe-c160-4796-82db-44643dd2550f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4427cf68-e3e6-4f7f-9124-6efb2e66169d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""632d0a08-decd-4bc2-84d6-defe4927622e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2c12b4fb-ceef-434c-92c8-a3f3c9dada50"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f7b4b11a-c5b9-4f25-8ce6-159f6049f3a8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""00191467-f68e-4039-b7ae-5cdc25a625fb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c278ede3-ca3c-4239-9298-b533bf4bf113"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // T01_Player
        m_T01_Player = asset.FindActionMap("T01_Player", throwIfNotFound: true);
        m_T01_Player_Move = m_T01_Player.FindAction("Move", throwIfNotFound: true);
        m_T01_Player_Look = m_T01_Player.FindAction("Look", throwIfNotFound: true);
        m_T01_Player_Jump = m_T01_Player.FindAction("Jump", throwIfNotFound: true);
        // T02_Player
        m_T02_Player = asset.FindActionMap("T02_Player", throwIfNotFound: true);
        m_T02_Player_Move = m_T02_Player.FindAction("Move", throwIfNotFound: true);
        m_T02_Player_Shot = m_T02_Player.FindAction("Shot", throwIfNotFound: true);
        m_T02_Player_ShowMenu = m_T02_Player.FindAction("ShowMenu", throwIfNotFound: true);
    }

    ~@GameInputActions()
    {
        UnityEngine.Debug.Assert(!m_T01_Player.enabled, "This will cause a leak and performance issues, GameInputActions.T01_Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_T02_Player.enabled, "This will cause a leak and performance issues, GameInputActions.T02_Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // T01_Player
    private readonly InputActionMap m_T01_Player;
    private List<IT01_PlayerActions> m_T01_PlayerActionsCallbackInterfaces = new List<IT01_PlayerActions>();
    private readonly InputAction m_T01_Player_Move;
    private readonly InputAction m_T01_Player_Look;
    private readonly InputAction m_T01_Player_Jump;
    public struct T01_PlayerActions
    {
        private @GameInputActions m_Wrapper;
        public T01_PlayerActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_T01_Player_Move;
        public InputAction @Look => m_Wrapper.m_T01_Player_Look;
        public InputAction @Jump => m_Wrapper.m_T01_Player_Jump;
        public InputActionMap Get() { return m_Wrapper.m_T01_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(T01_PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IT01_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_T01_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_T01_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IT01_PlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IT01_PlayerActions instance)
        {
            if (m_Wrapper.m_T01_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IT01_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_T01_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_T01_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public T01_PlayerActions @T01_Player => new T01_PlayerActions(this);

    // T02_Player
    private readonly InputActionMap m_T02_Player;
    private List<IT02_PlayerActions> m_T02_PlayerActionsCallbackInterfaces = new List<IT02_PlayerActions>();
    private readonly InputAction m_T02_Player_Move;
    private readonly InputAction m_T02_Player_Shot;
    private readonly InputAction m_T02_Player_ShowMenu;
    public struct T02_PlayerActions
    {
        private @GameInputActions m_Wrapper;
        public T02_PlayerActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_T02_Player_Move;
        public InputAction @Shot => m_Wrapper.m_T02_Player_Shot;
        public InputAction @ShowMenu => m_Wrapper.m_T02_Player_ShowMenu;
        public InputActionMap Get() { return m_Wrapper.m_T02_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(T02_PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IT02_PlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_T02_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_T02_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Shot.started += instance.OnShot;
            @Shot.performed += instance.OnShot;
            @Shot.canceled += instance.OnShot;
            @ShowMenu.started += instance.OnShowMenu;
            @ShowMenu.performed += instance.OnShowMenu;
            @ShowMenu.canceled += instance.OnShowMenu;
        }

        private void UnregisterCallbacks(IT02_PlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Shot.started -= instance.OnShot;
            @Shot.performed -= instance.OnShot;
            @Shot.canceled -= instance.OnShot;
            @ShowMenu.started -= instance.OnShowMenu;
            @ShowMenu.performed -= instance.OnShowMenu;
            @ShowMenu.canceled -= instance.OnShowMenu;
        }

        public void RemoveCallbacks(IT02_PlayerActions instance)
        {
            if (m_Wrapper.m_T02_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IT02_PlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_T02_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_T02_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public T02_PlayerActions @T02_Player => new T02_PlayerActions(this);
    public interface IT01_PlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IT02_PlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnShot(InputAction.CallbackContext context);
        void OnShowMenu(InputAction.CallbackContext context);
    }
}
